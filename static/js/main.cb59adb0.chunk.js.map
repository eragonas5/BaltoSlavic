{"version":3,"sources":["logo.svg","Details.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Details","props","name","audio","g","id","className","href","undefined","children","map","e","controls","style","width","src","type","App","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,0FC6B5BC,G,gBA3BC,SAACC,GAAW,IAClBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,EAErB,OACE,wBAAMC,GAAIH,EAAMI,UAAU,WACxB,sBAAIA,UAAU,kBACZ,qBAAGC,KAAM,IAAML,GAAOA,QACfM,IAANJ,EAAkB,GAAKA,EAAI,OAAS,QAEtCH,EAAMQ,cACID,IAAVL,EACCA,EAAMO,KAAI,SAACC,GAAD,OACR,gCACE,2BACA,yBAAOC,UAAQ,EAACC,MAAO,CAAEC,MAAO,SAC9B,0BAAQC,IAAKJ,EAAGK,KAAK,cADvB,wDAOJ,oCC4EOC,MA9Ff,WACE,OACE,yBAAKX,UAAU,OACb,0BAAMA,UAAU,cACd,4EACA,kBAAC,EAAD,CAASJ,KAAK,WAAd,yMAKA,kBAAC,EAAD,CACEA,KAAK,aACLC,MAAO,CACL,gGACA,2FAJJ,2JAWA,kBAAC,EAAD,CAASD,KAAK,SAASE,GAAG,GAA1B,0MAKA,kBAAC,EAAD,CAASF,KAAK,YAAYE,GAAG,GAA7B,6WAOA,kBAAC,EAAD,CAASF,KAAK,UAAUE,GAAG,GAA3B,yHAE8C,IAF9C,2EAKA,kBAAC,EAAD,CAASF,KAAK,QAAQE,GAAG,GAAzB,+HAIA,kBAAC,EAAD,CAASF,KAAK,SAASE,GAAG,GAA1B,mWAOA,kBAAC,EAAD,CAASF,KAAK,YAAYE,GAAG,GAA7B,wGAIA,kBAAC,EAAD,CAASF,KAAK,iBAAiBE,GAAG,GAAlC,sLAKA,kBAAC,EAAD,CAASF,KAAK,YAAYE,GAAG,GAA7B,qRAKA,kBAAC,EAAD,CAASF,KAAK,aAAaE,GAAG,GAA9B,yFAGA,kBAAC,EAAD,CAASF,KAAK,UAAUE,GAAG,GAA3B,4IAIA,kBAAC,EAAD,CAASF,KAAK,aAAaE,GAAG,GAA9B,+IAIA,kBAAC,EAAD,CAASF,KAAK,YAAYE,GAAG,GAA7B,oOAKA,kBAAC,EAAD,CAASF,KAAK,QAAQE,GAAG,GAAzB,0GAIA,kBAAC,EAAD,CAASF,KAAK,sBAAsBE,GAAG,GAAvC,4EAGA,yBAAKS,MAAO,CAAEK,UAAW,KACvB,uBAAGX,KAAK,6BAAR,iBADF,iBC/EYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cb59adb0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as React from 'react'\n\nconst Details = (props) => {\n  const { name, audio, g } = props\n\n  return (\n    <span id={name} className=\"Details\">\n      <h3 className=\"Details-header\">\n        <a href={'#' + name}>{name}</a>\n        {g === undefined ? '' : g ? ' - G' : ' - H'}\n      </h3>\n      {props.children}\n      {audio !== undefined ? (\n        audio.map((e) => (\n          <>\n            <br />\n            <audio controls style={{ width: '100%' }}>\n              <source src={e} type=\"audio/wav\" />\n              Your browser does not support the audio element.\n            </audio>\n          </>\n        ))\n      ) : (\n        <></>\n      )}\n    </span>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport Details from './Details'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main className=\"App-header\">\n        <h1>Distinguishing between Baltoslavic languages</h1>\n        <Details name=\"Latvian\">\n          Baltic language, stress almost always on the first syllable and many\n          German and East Slavic loanwords, the Latvian accent sometimes sounds\n          Finnic. Consonants aren't palatalised before front vowels.\n        </Details>\n        <Details\n          name=\"Lithuanian\"\n          audio={[\n            'https://cdn.discordapp.com/attachments/524167298945122305/747360164407017532/du_gaideliai.wav',\n            'https://cdn.discordapp.com/attachments/524167298945122305/739917706781917188/labas.wav',\n          ]}\n        >\n          Baltic language, stress can appear on any syllable. Consonants are\n          slightly palatalised before front vowels. The most beautiful language\n          on the planet!\n        </Details>\n        <Details name=\"Polish\" g={true}>\n          West Slavic, many sz, ś, cz, ć, dz, dź, ź, ż and also nasal sounds ę\n          and ą, g-language Silesian – West Slavic, like Polish but with a lot\n          of German loanwords.\n        </Details>\n        <Details name=\"Kashubian\" g={true}>\n          West Slavic, like Polish, but has a schwa /ə/, opposed to other West\n          Slavic languages. Where in Polish there are „y” and „u” there is often\n          a schwa in Kashubian and where in Polish there is an „a” in the end of\n          feminine nouns, usually there is „ô” (something between „a” and „o”)\n          in Kashubian.\n        </Details>\n        <Details name=\"Sorbian\" g={false}>\n          West Slavic, something between Czech and Polish, but with German\n          accent, In Lower Sorbian, Polish ć, dź, r -{'>'} ś, ź, š (also accent\n          on first syllable), has dual form.\n        </Details>\n        <Details name=\"Czech\" g={false}>\n          West Slavic, contains ř (!) and has specific melody, common long\n          consonant clusters, e. g. čtvrt, prst, tvrdý.\n        </Details>\n        <Details name=\"Slovak\" g={false}>\n          West Slavic, like Czech, but lacks ř and has ô /uo/ ĺ /l:/ and ŕ /r:/,\n          common long consonant clusters like Czech, e. g. štvrť, prst, tvrdý,\n          has more diphthongs than Czech and a very beautiful melody, Slovak\n          uses international names of months unlike Czech: január (SK) = leden\n          (CZ), február (SK) = únor (CZ) etc.\n        </Details>\n        <Details name=\"Slovenian\" g={true}>\n          South Slavic, fluctuant melody like Serbo-Croatian, very similar to\n          distinguish from Serbo-Croatian.\n        </Details>\n        <Details name=\"Serbo-Croatian\" g={true}>\n          South Slavic, fluctuant melody like Slovenian. Croatian has months of\n          Slavic origin, Serbian has international: kolovoz (HR) = Август\n          /avgust/ (SRB)\n        </Details>\n        <Details name=\"Bulgarian\" g={true}>\n          South Slavic, contains the letter ъ (/ɤ/, [ɐ]), has definite articles\n          in form of suffixes and they use them instead of declension, e.g. село\n          /selo/ (village) - до селото /do seloto/ (to the village)\n        </Details>\n        <Details name=\"Macedonian\" g={true}>\n          South Slavic, like Bulgarian, but lacks ъ and has ѓ [ɟ] and ќ [c]\n        </Details>\n        <Details name=\"Russian\" g={true}>\n          East Slavic, you know how it sounds, written „o“ changes into /a/ when\n          not stressed, more loanwords (Turkic and International)\n        </Details>\n        <Details name=\"Belarusian\" g={false}>\n          East Slavic, sounds like Russian, but has a lot more „a“ vowels (and\n          they write almost each of them), has stronger palatalisation\n        </Details>\n        <Details name=\"Ukrainian\" g={false}>\n          East Slavic, sounds like Russian, but does not use /a/ instead of /o/,\n          and Ukrainians write the letter „i“ wherivir it is pissible, e.g. міст\n          /mist/ (UKR) = мост /most/ (RUS)\n        </Details>\n        <Details name=\"Rusyn\" g={false}>\n          East Slavic, something between Slovak and Ukrainian,accent on\n          penultimate syllable, ы is [ɯ]\n        </Details>\n        <Details name=\"Old Church Slavonic\" g={true}>\n          similar to Bulgarian, has some odd vowels like ą, ę and ě\n        </Details>\n        <div style={{ marginTop: 40 }}>\n          <a href=\"https://discord.gg/Q88cXu\">#balto-slavic</a> gang 2020\n        </div>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}